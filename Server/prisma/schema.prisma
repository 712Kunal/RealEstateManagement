generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("LOCALDB_URL")
}

// FIELD ATTRUBUTES / MODEL ATTRIBUTES =>
// @id - This marks the field as the primary key of the model.
// @default(auto()) -  Sets a default value for the field, which is automatically generated.
// @map("_id") - Maps the field in your Prisma model to a field with a different name in the database.(Mainly used in relation databases)
// @db.ObjectId -  Id should be stored as an ObjectId, which is a special type used by MongoDB for unique identifiers.
// @unique - Ensures that all values in this field are unique across all records.
// @default(now()) - Sets the default value of the field to the current date and time when a new record is created.
// ? -  Indicates that the field is optional.
// npx prisma init --datasource-provider mongodb
// npx prisma generate
// npx prisma db push - Important command
model User {
  id         String                @id @default(auto()) @map("_id") @db.ObjectId
  username   String                @unique
  email      String                @unique
  password   String
  avatar     String?
  createdAt  DateTime              @default(now())
  UserOTPs   UserOTPVerification[] //BECAUSE A SINGLE USER CAN HAVE MULTIPLE OTP VERIFICATIONS, THEREFORE WE NEED TO USE AN ARRAY
  posts      Post[] //BECAUSE A SINGLE USER CAN HAVE MULTIPLE POSTS, THEREFORE WE NEED TO USE AN ARRAY
  savedPosts SavedPost[]
}

model UserOTPVerification {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  relatedUser User     @relation(fields: [userId], references: [id])
  otp         String
  createdAt   DateTime @default(now())
  expiredAt   DateTime
}

model Post {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  price        Int
  Images       String[]
  address      String
  city         String
  bedrooms     Int
  bathrooms    Int
  latitude     String
  longitude    String
  type         Type
  propertyType PropertyType
  userId       String       @db.ObjectId
  relatedUser  User         @relation(fields: [userId], references: [id])
  cratedAt     DateTime     @default(now())
  postDetail   PostDetail?
  savedPosts   SavedPost[]
}

enum Type {
  buy
  rent
}

enum PropertyType {
  appartment
  house
  flat
  condo
  land
}

model PostDetail {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  desc        String
  utilities   String?
  pet         String?
  income      String?
  size        Int?
  school      Int?
  bus         Int?
  restaurant  Int?
  postId      String  @unique @db.ObjectId
  relatedPost Post    @relation(fields: [postId], references: [id])
}

model SavedPost {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  relatedUser User     @relation(fields: [userId], references: [id])
  postId      String   @db.ObjectId
  relatedPost Post     @relation(fields: [postId], references: [id])
  createdAt   DateTime @default(now())

  @@unique([userId, postId])
}
